// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: pb/users/v1/users.proto

package pbusers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateOneUser_FullMethodName               = "/pb.users.pbuser.UserService/CreateOneUser"
	UserService_GetOneUser_FullMethodName                  = "/pb.users.pbuser.UserService/GetOneUser"
	UserService_GetOneCredentialUserByEmail_FullMethodName = "/pb.users.pbuser.UserService/GetOneCredentialUserByEmail"
	UserService_GetManyUser_FullMethodName                 = "/pb.users.pbuser.UserService/GetManyUser"
	UserService_UpdateOnePasswordUser_FullMethodName       = "/pb.users.pbuser.UserService/UpdateOnePasswordUser"
	UserService_UpdateOneEmailUser_FullMethodName          = "/pb.users.pbuser.UserService/UpdateOneEmailUser"
	UserService_UpdateOneRoleUser_FullMethodName           = "/pb.users.pbuser.UserService/UpdateOneRoleUser"
	UserService_DeleteSoftOneUser_FullMethodName           = "/pb.users.pbuser.UserService/DeleteSoftOneUser"
	UserService_DeleteHardOneUser_FullMethodName           = "/pb.users.pbuser.UserService/DeleteHardOneUser"
	UserService_LoginUser_FullMethodName                   = "/pb.users.pbuser.UserService/LoginUser"
	UserService_VerifyTokenUser_FullMethodName             = "/pb.users.pbuser.UserService/VerifyTokenUser"
	UserService_RefreshTokenUser_FullMethodName            = "/pb.users.pbuser.UserService/RefreshTokenUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateOneUser(ctx context.Context, in *CreateOneUserRequest, opts ...grpc.CallOption) (*CreateOneUserResponse, error)
	GetOneUser(ctx context.Context, in *GetOneUserRequest, opts ...grpc.CallOption) (*GetOneUserResponse, error)
	GetOneCredentialUserByEmail(ctx context.Context, in *GetOneCredentialUserByEmailRequest, opts ...grpc.CallOption) (*GetOneCredentialUserByEmailResponse, error)
	GetManyUser(ctx context.Context, in *GetManyUserRequest, opts ...grpc.CallOption) (*GetManyUserResponse, error)
	UpdateOnePasswordUser(ctx context.Context, in *UpdateOnePasswordUserRequest, opts ...grpc.CallOption) (*UpdateOnePasswordUserResponse, error)
	UpdateOneEmailUser(ctx context.Context, in *UpdateOneEmailUserRequest, opts ...grpc.CallOption) (*UpdateOneEmailUserResponse, error)
	UpdateOneRoleUser(ctx context.Context, in *UpdateOneRoleUserRequest, opts ...grpc.CallOption) (*UpdateOneRoleUserResponse, error)
	DeleteSoftOneUser(ctx context.Context, in *DeleteSoftOneUserRequest, opts ...grpc.CallOption) (*DeleteSoftOneUserResponse, error)
	DeleteHardOneUser(ctx context.Context, in *DeleteHardOneUserRequest, opts ...grpc.CallOption) (*DeleteHardOneUserResponse, error)
	// Auth services
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	VerifyTokenUser(ctx context.Context, in *VerifyTokenUserRequest, opts ...grpc.CallOption) (*VerifyTokenUserResponse, error)
	RefreshTokenUser(ctx context.Context, in *RefreshTokenUserRequest, opts ...grpc.CallOption) (*RefreshTokenUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateOneUser(ctx context.Context, in *CreateOneUserRequest, opts ...grpc.CallOption) (*CreateOneUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOneUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateOneUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOneUser(ctx context.Context, in *GetOneUserRequest, opts ...grpc.CallOption) (*GetOneUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetOneUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOneCredentialUserByEmail(ctx context.Context, in *GetOneCredentialUserByEmailRequest, opts ...grpc.CallOption) (*GetOneCredentialUserByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneCredentialUserByEmailResponse)
	err := c.cc.Invoke(ctx, UserService_GetOneCredentialUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetManyUser(ctx context.Context, in *GetManyUserRequest, opts ...grpc.CallOption) (*GetManyUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManyUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetManyUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateOnePasswordUser(ctx context.Context, in *UpdateOnePasswordUserRequest, opts ...grpc.CallOption) (*UpdateOnePasswordUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOnePasswordUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateOnePasswordUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateOneEmailUser(ctx context.Context, in *UpdateOneEmailUserRequest, opts ...grpc.CallOption) (*UpdateOneEmailUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOneEmailUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateOneEmailUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateOneRoleUser(ctx context.Context, in *UpdateOneRoleUserRequest, opts ...grpc.CallOption) (*UpdateOneRoleUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOneRoleUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateOneRoleUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSoftOneUser(ctx context.Context, in *DeleteSoftOneUserRequest, opts ...grpc.CallOption) (*DeleteSoftOneUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSoftOneUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteSoftOneUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteHardOneUser(ctx context.Context, in *DeleteHardOneUserRequest, opts ...grpc.CallOption) (*DeleteHardOneUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHardOneUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteHardOneUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, UserService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyTokenUser(ctx context.Context, in *VerifyTokenUserRequest, opts ...grpc.CallOption) (*VerifyTokenUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTokenUserResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyTokenUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshTokenUser(ctx context.Context, in *RefreshTokenUserRequest, opts ...grpc.CallOption) (*RefreshTokenUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenUserResponse)
	err := c.cc.Invoke(ctx, UserService_RefreshTokenUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	CreateOneUser(context.Context, *CreateOneUserRequest) (*CreateOneUserResponse, error)
	GetOneUser(context.Context, *GetOneUserRequest) (*GetOneUserResponse, error)
	GetOneCredentialUserByEmail(context.Context, *GetOneCredentialUserByEmailRequest) (*GetOneCredentialUserByEmailResponse, error)
	GetManyUser(context.Context, *GetManyUserRequest) (*GetManyUserResponse, error)
	UpdateOnePasswordUser(context.Context, *UpdateOnePasswordUserRequest) (*UpdateOnePasswordUserResponse, error)
	UpdateOneEmailUser(context.Context, *UpdateOneEmailUserRequest) (*UpdateOneEmailUserResponse, error)
	UpdateOneRoleUser(context.Context, *UpdateOneRoleUserRequest) (*UpdateOneRoleUserResponse, error)
	DeleteSoftOneUser(context.Context, *DeleteSoftOneUserRequest) (*DeleteSoftOneUserResponse, error)
	DeleteHardOneUser(context.Context, *DeleteHardOneUserRequest) (*DeleteHardOneUserResponse, error)
	// Auth services
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	VerifyTokenUser(context.Context, *VerifyTokenUserRequest) (*VerifyTokenUserResponse, error)
	RefreshTokenUser(context.Context, *RefreshTokenUserRequest) (*RefreshTokenUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateOneUser(context.Context, *CreateOneUserRequest) (*CreateOneUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneUser not implemented")
}
func (UnimplementedUserServiceServer) GetOneUser(context.Context, *GetOneUserRequest) (*GetOneUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUser not implemented")
}
func (UnimplementedUserServiceServer) GetOneCredentialUserByEmail(context.Context, *GetOneCredentialUserByEmailRequest) (*GetOneCredentialUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneCredentialUserByEmail not implemented")
}
func (UnimplementedUserServiceServer) GetManyUser(context.Context, *GetManyUserRequest) (*GetManyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateOnePasswordUser(context.Context, *UpdateOnePasswordUserRequest) (*UpdateOnePasswordUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOnePasswordUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateOneEmailUser(context.Context, *UpdateOneEmailUserRequest) (*UpdateOneEmailUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneEmailUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateOneRoleUser(context.Context, *UpdateOneRoleUserRequest) (*UpdateOneRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneRoleUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteSoftOneUser(context.Context, *DeleteSoftOneUserRequest) (*DeleteSoftOneUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSoftOneUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteHardOneUser(context.Context, *DeleteHardOneUserRequest) (*DeleteHardOneUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHardOneUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) VerifyTokenUser(context.Context, *VerifyTokenUserRequest) (*VerifyTokenUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenUser not implemented")
}
func (UnimplementedUserServiceServer) RefreshTokenUser(context.Context, *RefreshTokenUserRequest) (*RefreshTokenUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateOneUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateOneUser(ctx, req.(*CreateOneUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOneUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOneUser(ctx, req.(*GetOneUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOneCredentialUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneCredentialUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOneCredentialUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOneCredentialUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOneCredentialUserByEmail(ctx, req.(*GetOneCredentialUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetManyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetManyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetManyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetManyUser(ctx, req.(*GetManyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateOnePasswordUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOnePasswordUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateOnePasswordUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateOnePasswordUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateOnePasswordUser(ctx, req.(*UpdateOnePasswordUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateOneEmailUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneEmailUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateOneEmailUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateOneEmailUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateOneEmailUser(ctx, req.(*UpdateOneEmailUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateOneRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateOneRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateOneRoleUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateOneRoleUser(ctx, req.(*UpdateOneRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSoftOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSoftOneUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSoftOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteSoftOneUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSoftOneUser(ctx, req.(*DeleteSoftOneUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteHardOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHardOneUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteHardOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteHardOneUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteHardOneUser(ctx, req.(*DeleteHardOneUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyTokenUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyTokenUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyTokenUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyTokenUser(ctx, req.(*VerifyTokenUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshTokenUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshTokenUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RefreshTokenUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshTokenUser(ctx, req.(*RefreshTokenUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.users.pbuser.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneUser",
			Handler:    _UserService_CreateOneUser_Handler,
		},
		{
			MethodName: "GetOneUser",
			Handler:    _UserService_GetOneUser_Handler,
		},
		{
			MethodName: "GetOneCredentialUserByEmail",
			Handler:    _UserService_GetOneCredentialUserByEmail_Handler,
		},
		{
			MethodName: "GetManyUser",
			Handler:    _UserService_GetManyUser_Handler,
		},
		{
			MethodName: "UpdateOnePasswordUser",
			Handler:    _UserService_UpdateOnePasswordUser_Handler,
		},
		{
			MethodName: "UpdateOneEmailUser",
			Handler:    _UserService_UpdateOneEmailUser_Handler,
		},
		{
			MethodName: "UpdateOneRoleUser",
			Handler:    _UserService_UpdateOneRoleUser_Handler,
		},
		{
			MethodName: "DeleteSoftOneUser",
			Handler:    _UserService_DeleteSoftOneUser_Handler,
		},
		{
			MethodName: "DeleteHardOneUser",
			Handler:    _UserService_DeleteHardOneUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "VerifyTokenUser",
			Handler:    _UserService_VerifyTokenUser_Handler,
		},
		{
			MethodName: "RefreshTokenUser",
			Handler:    _UserService_RefreshTokenUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/users/v1/users.proto",
}
